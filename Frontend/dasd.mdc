---
description: 
globs: 
alwaysApply: true
---
פרויקט גמר בניית אתרים
מסמך הנחיות ודגשים לפרויקט

מפרט אפיון הפרויקט
מבוא ומטרות
למידה עצמית היא Skill מאוד מרכזי במקצוע שלנו, ראוי להשתמש בו ככל האפשר במהלך הפרויקט. עם זאת, חשבו את הזמנים מראש (עוד Skill חשוב במקצוע שלנו) נא לסיים את הפרויקט ולהגישו בזמן.
השתדלו לא להיגרר ללימוד ויישום עוד ועוד נושאים אם זה יפריע לכם להגיש את הפרויקט בזמן.

לטובת הפרויקט תבנה אתר צד לקוח עם צד שרת תומך בנושא שתבחר.
על הפרויקט להיראות כמו אתר/אפליקציה אמיתית עם תמונות ותוכן טקסטואלי שלא כוללים lorem ipsum וכדומה. כמו כן הפרויקט צריך להיות רספונסיבי ומתאים לכל גדלי המסך האפשריים.

תיאור כללי:
פיתוח אפליקציה אינטרנטית הכוללת מערכת ניהול אתר המאפשרת למנהל האתר לפרסם תוכן. התוכן שיפורסם יהיה זמין בחלקים שונים של האתר. (לדוגמה אם מדובר בחנות אינטרנטית, לאחר שמוסיפים מוצר הוא צריך להופיע בדף הראשי או בדף מוצרים)

דגשים מרכזיים:
אתר מרכזי הכולל עמוד תצוגת תוכן.

מערכת התחברות הכוללת גישה לממשק ניהול אתר.

ממשק ניהול האתר יאפשר: הוספה, עריכה או מחיקה של תוכן.

תוכן האתר יישמר בצד שרת.

לא ניתן להגיש פרויקט סוף מודול כפרויקט גמר.

אופן הגשת הפרויקט:
את הפרויקט יש להעלות ל־git ללא תיקיות ה־node_modules, ולשלוח לינק למשימה שתיפתח עבורכם בקמפוס.

מסמך אפיון / ספר פרויקט על הפרויקט כולל קובץ טקסט ReadMe שמסביר על הפרויקט, תכולתו, הפונקציונאליות ודרך ההתממשקות עמו. אם יש קבצי env. עם פרטים אישיים יש לצרף גם אותם למשימה, אחרת יש להעלות אותם ל־git.

דרישות טכנולוגיות
עבור צד לקוח יש להשתמש בספריית react

עבור צד שרת יש להשתמש ב־node.js

עבור מאגר המידע יש להשתמש ב־mongoDB


דרישות כלליות
יש לשמור על קוד נקי ומסודר: לנקות קטעי קוד שהפכו להערות ו־console.log.

יש לבנות קוד שמספר סיפור ולתת לפונקציות ולמשתנים שמות משמעותיים.

יש לחלק את הפרויקט למודולים לפי נושאים.

יש להקפיד על המוסכמות לכתיבת קוד.

עיצוב הוא חלק בלתי נפרד מהצגת הפרויקט והיכולות של הפיתוח. גם אם אינך מעצב באופי, הקפד על עיצוב נקי ורספונסיבי לגדלים שונים של מסכים!

חשוב לזכור שפרויקט זה יהיה חלק מתיק העבודות שלכם וייצג אותך בכבוד מול מעסיקים פוטנציאליים ולכן יש לשמור על אסתטיקה של קוד ועיצוב.

דרישות טכנולוגיות צד לקוח
עיצוב ורספונסיביות – יש לעצב את האתר באמצעות CSS.

קובץ העיצוב הראשי – אם קובץ העיצוב (css) הוא מעל 100 שורות, יש לחלק אותו לקבצים נפרדים לפי הנושאים השונים.

אייקונים – ניתן לייבא אייקונים מספריות (לדוגמה: fontawsom, bootstrap icons, react-icons וכד').

דף כניסה צריך לכלול כותרת ראשית, כותרת משנית, טקסט ותמונה שיתאמו לאופי האתר/האפליקציה. אם מדובר באתר של חנות אינטרנטית כלשהי, יש להציג בדף הפתיחה שדה חיפוש ולפחות שלושה כרטיסי מוצר. הדף הפתיחה צריך להיות ברור לאיזה סוג של אתר/אפליקציה הגענו וצריך להיות מעוצב בצורה כזאת שתזמין את הגולש להירשם.

תפריט ניווט – על האתר/אפליקציה להכיל תפריט ניווט דינאמי שמשותף לכל דפי האתר.

Footer – על האתר/אפליקציה להכיל footer עם לוגו, זכויות יוצרים ואמצעי ליצור קשר עם האתר. במידת הצורך ניתן להוסיף גם בתפריט הניווט, קישורים למדיה חברתית או כל דבר אחר שיתאים לאזור זה באפליקציה/אתר.

נגישות – יש לשים את שם האפליקציה בתגית ה־title בקובץ ה־index הראשי, וכן תמונה/לוגו ב־favicon: link. כל תמונה חייבת לכלול את האטריבוט alt עם כיתוב שיתאר את התמונה.

דף אודות – יש ליצור דף אודות בו תספקו הסבר מעמיק על האתר ודרך ההתממשקות עמו.

טפסים – יש לשמור על אחידות בעיצוב כל הטפסים באתר. יש לערוך ולידציות על כל שדות הטפסים השונים. יש לתת חיווי ויזואלי מתחת לשדה אליו מוכנסים הנתונים אם המשתמש עומד או לא עומד בדרישות הוולידציה של השדה. יש לאפשר שליחה של הטפסים אך ורק לאחר שכל שדות החובה מלאים. יש לעדכן את הגולש בהצלחה או בכישלון של שליחת הנתונים מהטופס, ובמקרה של הצלחה יש להעבירו לדף הרלוונטי.

הרשמה והתחברות – על ממשק צד לקוח להציג דף התחברות ודף הרשמה הכוללים כותרות מתאימות וטופס להרשמה/התחברות. יש להשתמש ב־regex לשדות הסיסמאות בטפסים, שיחייב הכנסת סיסמה עם לפחות אות אחת גדולה ואות אחת קטנה באנגלית, לפחות ארבעה מספרים וסימן מיוחד מבין הסימנים הבאים (!@#$%^&-_) בנוסף על כך הסיסמה צריכה לכלול לפחות 8 תווים.


Token – לאחר התחברות מוצלחת יש לקבל מהשרת token עם ערך מוצפן תוך שימוש בספריית jwt ולשמור אותו ב־localStorage. יש להיעזר במידע שמוצפן בתוכו על מנת לקבוע את הרשאותיו של המשתמש. יש לתת חיווי ויזואלי בהתאם לסטאטוס ההתחברות של המשתמש.
אין לשמור מידע רגיש של המשתמש כמו מייל וסיסמה בתוך ה־token גם אם הוא מוצפן.

Crud – לאחר התחברות יש לאפשר למשתמש את פעולות ה־crud, קרי: קריאה, יצירה, עדכון ומחיקה של תוכן. התוכן שיוצרים צריך להיות זמין בחלקים שונים של האתר. לדוגמה, אם מדובר בחנות אינטרנטית, לאחר שמוסיפים מוצר הוא צריך להופיע בדף הראשי או בדף מוצרים. יש לתת חיווי ויזואלי לגולש על הצלחה/כישלון של ביצוע פעולות ה־crud.

מועדפים / הכנסה לסל קניות – יש לתת אפשרות לגולש לשמור תוכן (כרטיס/מוצר/משתמש וכד') במועדפים. יש לתת חיווי ויזואלי לכך שהתוכן מועדף על ידי הגולש. יש לשמור את העדפות הלקוח במאגר המידע כך שלא משנה מאיזה מכשיר המשתמש ייכנס לאתר/אפליקציה, התוכן שהוא העדיף ימשיך להיות מועדף. יש ליצור דף של תוכן מועדף, בו הגולש יוכל לראות את כל הפריטים שהוא סימן כמועדפים ואם ירצה יוכל להסיר מהדף פריטים מועדפים.

דף פרטי תוכן – בלחיצה על כרטיס/תוכן, משתמש/תוכן, הגולש יעבור לדף דינאמי בו יינתנו פרטים נוספים על פריט התוכן עליו לחץ הגולש.

שדה חיפוש – יש ליצור שדה חיפוש לתוכן (כרטיס/מוצר/משתמש וכ"ו).

הרשאות – יש לאפשר יצירה של לפחות שני סוגי משתמשים, כאשר הראשון הוא משתמש רגיל והשני הוא admin. רק משתמש שמוגדר כ־admin יוכל ליצור, לערוך ולמחוק תוכן, בעוד שמשתמש רגיל יוכל רק לראות או לסמן תוכן כמועדף עליו.

קריאות http – יש לבצע קריאות לצד שרת מצד לקוח ובאמצעותן לשלוח ולקבל מידע מהשרת. לצורך כך יש להשתמש בספריית axios. יש להשתמש במנגנון try & catch בקריאות אסינכרוניות לצד שרת. במקרה ומשתמשים בפונקציות אסינכרוניות, או לחליפין במנגנון then().catch(). וזאת על מנת שהקוד לא יישבר במקרה ותחזור שגיאה קריטית מהשרת.

ארכיטקטורה – יש לשמור על סדר הגיוני ומקובל בתעשייה של קבצים. על הקוד להיות נקי וקריא, עם חלוקה נכונה לתיקיות וקומפוננטות.

Console – יש להקפיד על עבודה נכונה עם ה־console. על הקונסול להיות נקי מהערות אזהרה, שגיאות ותוכן, כך שיהיה ניתן לראות בקלות שגיאות קריטיות מהשרת.

סינון תוכן – יש לתת לגולש אפשרות לסנן את התוכן המוצג בדף מסוים לפי פרמטרים שונים.

מצבי תצוגה – יש לאפשר מעבר בין תצוגות מידע שונות של תוכן המוצג לגולש. (תצוגת התוכן בטבלה או בכרטיסיות)


דרישות טכנולוגיות צד שרת
package.json בקובץ package.json יש לשים את ה־devDependencies, את nodemon, וכן שיהיה ברור מפתח ה־"main" שם הקובץ להפעלת האפליקציה.

האזנה לבקשות HTTP יש לבנות ממשק rest API שמאפשר קבלת בקשות, יצירה, עריכה, הצגה ומחיקה מתוך מאגר המידע בהתאם לבקשות צד לקוח. לצורך כך יש להשתמש בספריית express.

אותנטיקציה יש להעביר את הבקשה תהליך של אותנטיקציה על מנת לוודא שאכן הגולש הוא זה ששלח את הבקשה ולא האקר שמנסה לפרוץ למאגר המידע דרך השרת.

אוטוריזציה יש לאפשר בצד שרת רק למשתמש מחובר ומוגדר כ־admin לבצע הוספה, מחיקה או עריכה של מידע ממאגר המידע.

מאגר מידע את המידע בפרויקט יש לשמור בבסיס הנתונים MongoDB בצורה לוקלית או על ענן. כמו כן, ניתן לאפשר הוספה, עריכה ומחיקה של פרטים ממאגר המידע. במקרה שאתם מגישים חייב להיות קובץ env במידה ומשתמשים בו את המפתחות להתחברות עם שרת הענן.

ולידציות צד שרת יש לעשות ולידציות צד שרת עם ספריית joi או ספרייה דומה, ובמקרה של שגיאות יש לעצור את הפונקציות ברמת שליחת האובייקט לוולידציה של mongoose ושמירה במאגר המידע.

Routes & Models יש לחלק את הקוד למודולים לשמור על קוד נקי וקריא.

Logger יש להשתמש בספרייה לניהול בקשות http כדוגמת morgan או לחליפין ליצור logger משלכם שידפיס בקונסול קריאות צד לקוח לצד שרת.

הערות על שמות המשתנים והפונקציות להיות הגיוניים ויספרו סיפור על הקוד. במידת הצורך יש להוסיף הערות תמציתיות לתמתנים במידה ויש פונקציות מורכבות או שיש דף עם ריבוי פונקציות בתוכו.

בונוסים
Logout יש לאפשר לאפליקציה/אתר לנתק את המשתמש במידה ולא השתמש באתר/אפליקציה במשך יותר מ־4 שעות.

הגבלת בקשות יש להגביל את מספר הקריאות לשרת שמשתמש יכול לבצע ל־24 שעות לצורך הגנה על השרת מהתקפת מניעת השירות להאט/להקריס אותו.

ממשק ניהול משתמשים דף ניהול משתמשים שיציג בטבלה את המשתמשים הרשומים במאגר המידע בשרת. בדף זה אפשר לערוך או למחוק משתמשים, כמו כן ניתן לשנות את ההרשאות למשתמש ממשתמש רגיל ל־admin.

ניהול הזמנות/מועדפים דף שיראה למשתמש מסוג אדמין תוכן לפי כמות האנשים שהגדירו אותו כמועדף.



